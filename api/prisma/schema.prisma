generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DEV_DATABASE_URL")
}

model User {
  id                String      @id @default(uuid()) @db.Uuid
  email             String      @unique
  password          String?
  verfied           Boolean     @default(false)
  verificationEmail DateTime?
  suspended         Boolean     @default(false)
  Type              AccountType @default(EMAIL)
  AccountId         String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  Profile           Profile?
}

enum AccountType {
  EMAIL
  GOOGLE
  APPLE
}

model Profile {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique @db.Uuid
  firstName   String
  lastName    String
  nationality String
  nationalID  String
  dateOfBirth String
  gender      String
  phone       String?
  whatsapp    String?
}

model Admin {
  id       String @id @default(uuid()) @db.Uuid
  email    String @unique
  name     String
  password String
}

model Companies {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  contact   String
  name      String
  logo_url  String?
  password  String
  suspended Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Events[]
}

model Events {
  id           String       @id @default(uuid()) @db.Uuid
  published    Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  company      Companies    @relation(fields: [companyId], references: [id])
  companyId    String       @db.Uuid
  //ar
  title        String
  content      String
  //en
  title_en     String
  content_en   String
  //
  image_url    String
  location_url String
  status       EventStatus  @default(SOON)
  Event_Jobs   Event_Jobs[]
  //
  Location     Location     @relation(fields: [locationId], references: [id])
  locationId   String       @db.Uuid
}

enum EventStatus {
  SOON
  ACTIVE
  COMPLETED
}

model Event_Jobs {
  id        String           @id @default(uuid()) @db.Uuid
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  Event     Events           @relation(fields: [EventId], references: [id])
  EventId   String           @db.Uuid
  //ar
  title     String
  //en
  title_en  String
  //
  Status    Event_JobsStatus
  rate      Int
  rate_type Rate_type        @default(DAY)
}

enum Event_JobsStatus {
  CLOSED
  OPEN
}

enum Rate_type {
  HOURLY
  DAY
}

model Location {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  title_en  String
  Events    Events[]
}

//$argon2id$v=19$m=4096,t=3,p=1$Org39QC+ENPL8d5yajfoug$XjvNjYvDYIlXh/zj2tjdRgWgYbqWikuzTOKQjo8pNas
